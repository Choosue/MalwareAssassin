#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from xml.parsers.expat import ParserCreate
import os, json

class AndroidManifestSaxHandler(object):
    """docstring for AndroidManifestSaxHandler"""
    def __init__(self):
        self.__tagname = ''        # current tag name
        self.__isintent = False    # is current tag in intent
        self.__actions = []        # actions in intent filter 
        self.__categories = []     # categories in intent filter

        # Features
        self.__permissions = []    # permission list
        self.__packagename = ''    # package name
        self.__usesfeatures = []   # uses-feature
        self.__activities = []     # activity name list
        self.__receivers = []      # receiver name list

        # currently we don't support intent-filter
        # self.__intentfilters = {}  # intent filter

    def start_element(self, name, attrs):
        # extract permission
        if name == 'uses-permission':
            self.__permissions.append(attrs['android:name'])

        # extract package name
        if name == 'manifest':
            self.__packagename = attrs['package']

        # extract uses-feature
        if name == 'uses-feature':
            self.__usesfeatures.append(attrs['android:name'])

        # extract activity name
        if name == 'activity':
            self.__activities.append(attrs['android:name'])

        # extract receiver name
        if name == 'receiver':
            self.__receivers.append(attrs['android:name'])

        # currently we don't support intent-filter
        # extract intent filter
        # if name == 'intent-filter':
        #     self.__isintent = True
        #     self.__intentfilters[self.__activities[-1]] = {}
        # if name == 'category' and self.__isintent:
        #     length = len(self.__categories)
        #     key = 'category' + str(length + 1)
        #     self.__categories.append(key)
        #     self.__intentfilters[self.__activities[-1]][key] = attrs['android:name']
        # if name == 'action' and self.__isintent:
        #     length = len(self.__actions)
        #     key = 'action' + str(length + 1)
        #     self.__actions.append(key)
        #     self.__intentfilters[self.__activities[-1]][key] = attrs['android:name']

    def end_element(self, name):
        pass
        # if name == 'intent-filter':
        #     self.__isintent = False
        #     self.__actions = []      # clear actions in intent-filter
        #     self.__categories = []   # clear categories in intent-filter

    def char_data(self, text):
        pass

    def get_permissions(self):
        return self.__permissions

    def get_packagename(self):
        return self.__packagename

    def get_usesfeatures(self):
        return self.__usesfeatures

    def get_activities(self):
        return self.__activities

    def get_receivers(self):
        return self.__receivers

    # currently we don't support intent-filter
    # def get_intentfilters(self):
    #     return self.__intentfilters
    
def handler2dict(handler):
    return {
        'permissions' : handler.get_permissions(),
        'packagename' : handler.get_packagename(),
        'usesfeatures' : handler.get_usesfeatures(),
        'activities' : handler.get_activities(),
        'receivers' : handler.get_receivers()
    }

def parsemanifest(path, filename):
    # Read AndroidManifest.xml into xml
    f = open(os.path.join(path, filename))
    xml = f.read()
    f.close()

    # Parse xml by SAX
    handler = AndroidManifestSaxHandler()
    parser = ParserCreate()
    parser.StartElementHandler = handler.start_element
    parser.EndElementHandler = handler.end_element
    parser.CharacterDataHandler = handler.char_data
    parser.Parse(xml)
    # print(handler.get_permissions())
    # print(handler.get_packagename())
    # print(handler.get_usesfeatures())
    # print(handler.get_activities())
    # print(handler.get_receivers())
    with open(os.path.join(path, 'parsed-manifest.txt'), 'w') as outfile:
        json.dump(handler, outfile, default=handler2dict)
    # print(json.dumps(handler, default=handler2dict))